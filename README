MCDungeon

MCDungeon will create a procedurally generated dungeon in a preexisting
minecraft map. It is not yet feature complete, but can already generate
dungeons with quite a bit of variety. It is written in Python and
makes use of code from Paul Hodge's minetown project and David Rio
Vierra's pymclevel. This was inspired by BeeTLe BeTHLeHeM's MCMapper
project which, sadly, is no more.

CURRENT FEATURES:

   * Automatically finds a good location on a map based on range, size, and
     depth parameters. 

   * Generates a tower entrance to the dungeon that can be seen for many
     chunks. The height of the tower is configurable.

   * Generates room layouts based on a random weighted selection
     of rooms. 

   * Places stairwells between levels, and a tower entrance with a
     spiraling staircase.

   * Optionally places a MultiVerse (Craftbukkit plugin) portal at
     the bottom of the dungeon to teleport players out to the world of
     your choice.

   * Connects rooms with hallways. Hall types are also chosen from
     a random weighted list.

   * Places random floor decorations from a weighted list.

   * Places features in rooms.

   * Places doors, portcullises, and torches in the dungeon. The amount of
     each is a configurable option. 

   * Option to place fewer torches as levels go down. Less light == more 
     danger!

   * Places chests with loot around the dungeon in (probably) hard
     to reach places. An arbitrary number of loot tables can be configured
     to provide variety. The density of chests is configurable. 

   * Places mob spawners throughout the dungeon. These will likely be near
     chests, but not always. Mob types are configurable. The density of
     spawners is configurable. Some 'non-standard' mobs are available. ;)

   * Random placement of secret traps.

   * Room, hall, floor, and feature lists are configurable via an
     external .cfg file. 

   * Saves changes (with lighting!) to a Minecraft map thanks to pymclevel.

   * Cobblestone has random patches of moss growing on it.

   * Output floor maps to a terminal with color on ANSI systems.

   * Output entire dungeon maps to HTML.

TODO:

   * More floor types
   * More room features
   * More room types
   * More hall types
   * More traps!

OPTIONS:

$ mcdungeon.py -h
usage: mcdungeon.py [-h] [-v] [--config CFGFILE] [--write] [--skip-relight]
                    [-t FLOOR] [--html BASENAME] [--force] [-s SEED]
                    [-o X Y Z] [-i]
                    SAVEDIR Z X LEVELS

positional arguments:
  SAVEDIR               Target world (path to save directory)
  Z                     Number of rooms West -> East. Use -1 for random.
  X                     Number of rooms North -> South. Use -1 for random.
  LEVELS                Number of levels. Use -1 for random.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         Print version and exit
  --config CFGFILE      Alternate config file. Default: configs/default.cfg
  --write               Write the dungeon to disk
  --skip-relight        Skip relighting the level
  -t FLOOR, --term FLOOR
                        Print a text version of a given floor to the terminal
  --html BASENAME       Output html versions of the dungeon. This produces one
                        file per level of the form BASENAME-(level
                        number).html
  --force               Force overwriting of html output files
  -s SEED, --seed SEED  Provide a seed for this dungeon. This can be anything
  -o X Y Z, --offset X Y Z
                        Provide a location offset. (overrides .cfg file)
  -i, --interactive     Start in interactive mode. Prompt for SAVEDIR, Z, X,
                        CFGFILE, and LEVELS.

EXAMPLES:

Load a world named 'Dungeon' in the current directory, generate a
5x4x3 dungeon layout (5 rooms E/W, 4 rooms N/S, and 3 levels deep)
and display the results in a terminal window. (In color on ANSI
terminals only. Sorry Windows) The world files will not be modified,
but are required. Basically a "dry run."

./mcdungeon.py Dungeon 5 4 3 --term 1
